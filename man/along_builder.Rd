% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step-builder.R
\name{along_builder}
\alias{along_builder}
\alias{poke_into_builder}
\title{Build a typed output}
\usage{
along_builder(along)

poke_into_builder(to)
}
\arguments{
\item{along}{A vector that will be safely duplicated before
filling.}

\item{to}{A vector that will be modified in place. If the final
output has a different length than \code{to}, it will still be copied
when grown and/or shrunk.}
}
\description{
\code{along_builder()} and \code{poke_into_builder()} are builder functions,
i.e. reducer functions that construct an output when reduced with
\code{\link[purrr:reduce]{purrr::reduce()}} or \code{\link[=reduce_steps]{reduce_steps()}}. While \code{along_builder()}
duplicates its input, \code{poke_into_builder()} fills the supplied
input in place. The latter is only meant for experience users as
this mutation can cause unexpected side effects. You should only
mutate vectors that you have created.

These builder functions construct a vector of a given type and
manage memory. The vector is automatically grown (with a rate of
1.5) when it becomes too small and filled with the output during
reduction. The vector is automatically shrinked to the final output
size when the reduction completes. To avoid the extra copies caused
by vector growing and shrinking, supply a vector whose size matches
exactly the final output.

The builder functions can be combined with \link[=steps]{transformation steps} to provide interesting functionality. See the
\code{\link[=take]{take()}} variants for higher-level functions.
}
\examples{
# Let's discard all pair elements during reduction to make the
# examples a bit more interesting
trans <- keep_step(~ . \%\% 2 == 0)

# You can supply an empty vector to indicate the output type. The
# output vector will be grown efficiently.
reduce_steps(1:10, trans, along_builder(list()))

# If you have created a vector and want to modify it in place to
# gain a bit of performance, you can use the poker version:
vec <- vector("list", 5L)
reduce_steps(1:10, trans, poke_into_builder(vec))

# The output vector is modified in place. This can have surprising
# side effects:
vec
}
\seealso{
\code{\link[=reduce_steps]{reduce_steps()}}, \link{steps}
}
